# xception.py  ‚Äî pretrained Xception (timm)

import torch
import torch.nn as nn

class Xception(nn.Module):
    def __init__(self,
                 num_classes: int = 2,
                 model_name: str = "xception",
                 pretrained: bool = True,
                 freeze_backbone: bool = False,
                 drop_rate: float = 0.0,
                 drop_path_rate: float = 0.0):
        super().__init__()
        try:
            import timm
        except ImportError as e:
            raise ImportError("C·∫ßn c√†i `timm`: pip install timm") from e

        # Ki·ªÉm tra model c√≥ t·ªìn t·∫°i kh√¥ng
        available_models = timm.list_models()
        if model_name not in available_models:
            # T√¨m model Xception thay th·∫ø
            xception_models = [m for m in available_models if 'xception' in m.lower()]
            if xception_models:
                print(f"[Xception] Model '{model_name}' kh√¥ng t·ªìn t·∫°i. C√°c model Xception c√≥ s·∫µn: {xception_models}")
                model_name = xception_models[0]  # D√πng model ƒë·∫ßu ti√™n
                print(f"[Xception] S·ª≠ d·ª•ng '{model_name}' thay th·∫ø")
            else:
                raise ValueError(f"Kh√¥ng t√¨m th·∫•y model Xception n√†o trong timm. Available models: {len(available_models)}")

        # Kh·ªüi t·∫°o backbone v·ªõi debug v√† fallback
        self.backbone = None
        
        try:
            print(f"[Xception] ƒêang t·∫°o model '{model_name}' v·ªõi pretrained={pretrained}")
            self.backbone = timm.create_model(
                model_name,
                pretrained=pretrained,
                num_classes=num_classes,
                drop_rate=drop_rate,
                drop_path_rate=drop_path_rate,
                global_pool="avg"
            )
            print(f"[Xception] ‚úÖ T·∫°o th√†nh c√¥ng!")
        except TypeError as e:
            print(f"[Xception] ‚ùå L·ªói TypeError: {e}")
            # Fallback: kh√¥ng d√πng drop_path_rate
            if "drop_path_rate" in str(e):
                print(f"[Xception] üîÑ Th·ª≠ b·ªè drop_path_rate...")
                try:
                    self.backbone = timm.create_model(
                        model_name,
                        pretrained=pretrained,
                        num_classes=num_classes,
                        drop_rate=drop_rate,
                        global_pool="avg"
                    )
                    print(f"[Xception] ‚úÖ Fallback th√†nh c√¥ng!")
                except Exception as ex2:
                    print(f"[Xception] ‚ùå Fallback th·∫•t b·∫°i: {ex2}")
                    raise RuntimeError(f"Kh√¥ng th·ªÉ t·∫°o Xception v·ªõi '{model_name}'. "
                                     f"L·ªói g·ªëc: {e}. L·ªói fallback: {ex2}") from ex2
            else:
                raise RuntimeError(f"Kh√¥ng th·ªÉ t·∫°o Xception v·ªõi '{model_name}': {e}") from e
        except Exception as ex:
            print(f"[Xception] ‚ùå L·ªói kh√°c: {ex}")
            if pretrained:
                print("[Xception] üîÑ Th·ª≠ fallback v·ªõi pretrained=False...")
                try:
                    self.backbone = timm.create_model(
                        model_name,
                        pretrained=False,
                        num_classes=num_classes,
                        drop_rate=drop_rate,
                        global_pool="avg"
                    )
                    print(f"[Xception] ‚úÖ Fallback th√†nh c√¥ng!")
                except Exception as ex2:
                    print(f"[Xception] ‚ùå Fallback c≈©ng th·∫•t b·∫°i: {ex2}")
                    raise RuntimeError(f"Kh√¥ng th·ªÉ t·∫°o Xception v·ªõi '{model_name}'. "
                                     f"L·ªói g·ªëc: {ex}. L·ªói fallback: {ex2}") from ex2
            else:
                raise RuntimeError(f"Kh√¥ng th·ªÉ t·∫°o Xception v·ªõi '{model_name}': {ex}") from ex
        
        # ƒê·∫£m b·∫£o backbone ƒë√£ ƒë∆∞·ª£c t·∫°o
        if self.backbone is None:
            raise RuntimeError("Xception backbone v·∫´n l√† None sau khi kh·ªüi t·∫°o!")

        if freeze_backbone:
            # ƒê√≥ng bƒÉng m·ªçi th·ª© tr·ª´ classifier (t√™n head tu·ª≥ model, timm map v·ªÅ "classifier")
            for n, p in self.backbone.named_parameters():
                if "classifier" in n:
                    continue
                p.requires_grad = False

        self._frozen = freeze_backbone
        self.model_name = model_name
        
        # Validation ƒë·ªÉ ƒë·∫£m b·∫£o model s·∫µn s√†ng
        self._validate_model()

    def _validate_model(self):
        """Validate model is properly initialized"""
        if not hasattr(self, 'backbone') or self.backbone is None:
            raise RuntimeError("Xception backbone validation failed!")
        
        # Test forward pass v·ªõi dummy input
        try:
            with torch.no_grad():
                dummy_input = torch.randn(1, 3, 224, 224)
                _ = self.backbone(dummy_input)
            print("[Xception] ‚úÖ Model validation passed")
        except Exception as e:
            raise RuntimeError(f"Xception validation failed: {e}") from e

    def unfreeze(self):
        """G·ªçi sau v√†i epoch ƒë·ªÉ finetune to√†n b·ªô backbone."""
        for p in self.backbone.parameters():
            p.requires_grad = True
        self._frozen = False

    def forward(self, x):
        # DataParallel-safe forward: tr·ª±c ti·∫øp g·ªçi backbone thay v√¨ check hasattr
        # hasattr c√≥ th·ªÉ fail khi model ƒë∆∞·ª£c replicate sang GPU kh√°c
        try:
            return self.backbone(x)
        except AttributeError:
            raise RuntimeError(
                "Xception.backbone kh√¥ng t·ªìn t·∫°i. C√≥ th·ªÉ do:\n"
                "1. L·ªói trong __init__ (backbone ch∆∞a ƒë∆∞·ª£c t·∫°o)\n"
                "2. DataParallel replication issues\n"
                "3. Model ƒë∆∞·ª£c load kh√¥ng ƒë√∫ng c√°ch"
            )
        except Exception as e:
            raise RuntimeError(f"L·ªói khi ch·∫°y forward pass trong Xception backbone: {e}") from e


# Factory ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi trainer g·ªçi create_model(...)
def create_model(num_classes=2,
                 model_name: str = "xception",
                 pretrained: bool = True,
                 freeze_backbone: bool = False,
                 drop_rate: float = 0.0,
                 drop_path_rate: float = 0.0):
    return Xception(num_classes=num_classes,
                    model_name=model_name,
                    pretrained=pretrained,
                    freeze_backbone=freeze_backbone,
                    drop_rate=drop_rate,
                    drop_path_rate=drop_path_rate)


# -------------------- Quick test --------------------
if __name__ == "__main__":
    # Ch·∫°y nhanh v·ªõi 224 (v·∫´n OK do GAP)
    m = Xception(num_classes=2, model_name="xception", pretrained=False)
    x = torch.randn(1, 3, 224, 224)
    y = m(x)
    print("Output:", y.shape)
    print("Params (M):", sum(p.numel() for p in m.parameters()) / 1e6)

    # N·∫øu mu·ªën ƒë√∫ng ‚ÄúTF Xception‚Äù 299x299:
    m_tf = Xception(num_classes=2, model_name="tf_xception", pretrained=False)
    y_tf = m_tf(torch.randn(1, 3, 299, 299))
    print("TF-Xception Output:", y_tf.shape)
